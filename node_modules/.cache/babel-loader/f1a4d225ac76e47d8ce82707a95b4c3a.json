{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, set, get } from 'firebase/database';\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from 'firebase/auth';\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getDatabase(app);\n/* \r\n This is an auxiliary function that adds an empty array to the object for rendering,\r\n since empty arrays cannot be stored in the database.\r\n*/\n\nconst addEmptyArrays = data => {\n  return data.map(obj => obj.hasOwnProperty('data') ? obj : { ...obj,\n    data: []\n  });\n}; // Helper function for writing data in the database\n\n\nconst writeToDataBase = (path, data) => set(ref(db, path), data); // Helper function for reading data from the database\n\n\nconst readFromDatabase = path => get(ref(db, path)); // database\n\n\nconst database = {\n  // send user information (email,avatar,nickname,id)\n  writeUserInfoData: async userInfo => {\n    const path = `users/${userInfo.uid}/user_info`;\n    const data = {\n      uid: userInfo.uid,\n      username: userInfo.nick,\n      email: userInfo.email,\n      avatar: userInfo.photo\n    };\n    return userInfo.uid && (await writeToDataBase(path, data));\n  },\n  // send user tasks Data\n  writeUserTasksData: async (userId, date, tabItems) => {\n    const path = `users/${userId}/user_tasks/${date}`;\n    return userId && (await writeToDataBase(path, { ...tabItems.tasks\n    }));\n  },\n  // create/read new day\n  writeNewDayData: async (userId, date, setTabItems, setCategory, setTab) => {\n    const path = `users/${userId}/user_tasks/${date}`;\n    const snapshot = await readFromDatabase(path);\n    const dataTabItems = {\n      date: new Date().toLocaleDateString().split('.').reverse().join(''),\n      tasks: []\n    };\n\n    if (snapshot.exists()) {\n      const tasks = snapshot.val();\n      setCategory(tasks[0].title);\n      setTab(tasks[0].title);\n      dataTabItems.tasks = addEmptyArrays(tasks);\n    }\n\n    return setTabItems(dataTabItems);\n  },\n  // create Data for new user\n  createUserData: async (userId, userInfo, tabItems) => {\n    const day = new Date().toLocaleDateString().replaceAll('.', '');\n    const path = `users/${userId}`;\n    const data = {\n      user_info: {\n        uid: userInfo.uid,\n        username: userInfo.nick,\n        email: userInfo.email,\n        avatar: userInfo.photo\n      },\n      user_tasks: {\n        [day]: tabItems.tasks\n      }\n    };\n    return userId && (await writeToDataBase(path, data));\n  },\n  // reade user Data\n  readUserData: async (userId, setUserInfo, tabItems, setTabItems, setTab, setCategory) => {\n    const date = new Date().toLocaleDateString().replaceAll('.', '');\n    const path = `users/${userId}/`;\n    const snapshot = await readFromDatabase(path);\n\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n      const condition = data.user_tasks && data.user_tasks[date];\n      const userData = {\n        info: {\n          photo: data.user_info.avatar,\n          nick: data.user_info.username,\n          email: data.user_info.email,\n          uid: data.user_info.uid\n        },\n        tasks: { ...tabItems,\n          tasks: addEmptyArrays(condition ? data.user_tasks[date] : [])\n        }\n      };\n      setUserInfo(userData.info);\n      setTabItems(userData.tasks);\n      setCategory(condition ? data.user_tasks[date][0].title : '');\n      setTab(condition ? data.user_tasks[date][0].title : '');\n    }\n  },\n  // reading the data of the selected day\n  readPastData: async _ref => {\n    let { ...params\n    } = _ref;\n    const date = params.date.toLocaleDateString().replaceAll('.', '');\n    const path = `users/${params.userInfo.uid}/user_tasks/${date}`;\n    const snapshot = await readFromDatabase(path);\n\n    if (snapshot.exists()) {\n      const tasks = snapshot.val();\n      params.setCalendarDate(params.date);\n      params.setCategory(tasks[0].title);\n      params.setTab(tasks[0].title);\n      params.setTabItems({ ...params.tabItems,\n        tasks: addEmptyArrays(tasks)\n      });\n      params.openModals({ ...params.modals,\n        calendarModal: false\n      });\n    } else {\n      params.createAuthInfoModal({\n        show: true,\n        type: 'Error',\n        text: `You don't have any tasks for this day`\n      });\n    }\n  },\n  // Statistics\n  createStatistics: async (userId, period, setStatistics) => {\n    const date = new Date().toLocaleDateString().replaceAll('.', '');\n    const path = `users/${userId}/user_tasks/${period === 'Day' ? date : ''}`;\n    const snapshot = await readFromDatabase(path);\n    const statistics = {\n      Categories: 0,\n      Created: 0,\n      Completed: 0\n    };\n\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n\n      const updateStatistics = data => {\n        data.forEach(category => {\n          if (category.hasOwnProperty('data')) {\n            statistics.Created += category.data.length;\n            statistics.Completed += category.data.filter(task => task.completed).length;\n          }\n        });\n      };\n\n      const periods = {\n        Day: () => {\n          statistics.Categories = data.length;\n          updateStatistics(data);\n        },\n        Month: () => {\n          const currentMonth = date.substring(2, 4);\n\n          for (const day in data) {\n            if (day.substring(2, 4) === currentMonth) {\n              statistics.Categories += data[day].length;\n              updateStatistics(data[day]);\n            }\n          }\n        },\n        Year: () => {\n          const currentYear = date.substring(4);\n\n          for (const day in data) {\n            if (day.substring(4) === currentYear) {\n              statistics.Categories += data[day].length;\n              updateStatistics(data[day]);\n            }\n          }\n        }\n      };\n      periods[period]();\n    }\n\n    return setStatistics(statistics);\n  }\n}; // Authentication methods\n\nconst authentication = {\n  // Login\n  loginEmailPassword: async params => {\n    const {\n      login,\n      setLogin,\n      createAuthInfoModal,\n      userInfo,\n      setUserInfo,\n      tabItems,\n      setTabItems,\n      setTab,\n      setCategory,\n      modals,\n      openModals\n    } = params;\n\n    if (login.Password) {\n      try {\n        const userCredential = await signInWithEmailAndPassword(auth, login.Email, login.Password);\n\n        if (userCredential) {\n          setLogin({\n            Email: '',\n            Password: ''\n          });\n          createAuthInfoModal({\n            show: true,\n            type: 'Success',\n            text: 'Authorization successfully'\n          });\n          setUserInfo({ ...userInfo,\n            uid: userCredential.user.uid\n          });\n          database.readUserData(userCredential.user.uid, setUserInfo, tabItems, setTabItems, setTab, setCategory);\n          setTimeout(() => openModals({ ...modals,\n            authModal: false\n          }), 1500);\n        }\n      } catch (Error) {\n        createAuthInfoModal({\n          show: true,\n          type: 'Error',\n          text: Error.code\n        });\n      }\n    }\n  },\n  // Registration\n  registrationEmailPassword: async params => {\n    const {\n      registration,\n      setRegistration,\n      navigate,\n      createAuthInfoModal,\n      userInfo,\n      setUserInfo,\n      tabItems,\n      modals,\n      openModals\n    } = params;\n\n    if (registration.Password) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(auth, registration.Email, registration.Password);\n\n        if (userCredential) {\n          setRegistration({\n            Email: '',\n            Password: ''\n          });\n          createAuthInfoModal({\n            show: true,\n            type: 'Success',\n            text: 'Registration successfully'\n          });\n          setUserInfo({ ...userInfo,\n            email: userCredential.user.email,\n            uid: userCredential.user.uid\n          });\n          database.createUserData(userCredential.user.uid, userInfo, tabItems);\n          setTimeout(() => {\n            openModals({ ...modals,\n              authModal: false\n            });\n            navigate('Profile.jsx');\n          }, 1000);\n        }\n      } catch (Error) {\n        console.log(Error);\n        createAuthInfoModal({\n          show: true,\n          type: 'Error',\n          text: Error.code\n        });\n      }\n    }\n  },\n  // Logout\n  logOut: async _ref2 => {\n    let { ...params\n    } = _ref2;\n    const userData = {\n      info: {\n        photo: params.defaultPhoto,\n        nick: 'username',\n        email: '',\n        uid: ''\n      },\n      tasks: { ...params.tabItems,\n        tasks: []\n      }\n    };\n    params.setCalendarDate(new Date());\n    params.setTimeLine({\n      past: false,\n      future: false\n    });\n    params.setUserInfo(userData.info);\n    params.setTabItems(userData.tasks);\n    return await signOut(auth);\n  }\n};\nexport { authentication, database };","map":{"version":3,"names":["initializeApp","getDatabase","ref","set","get","getAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","auth","db","addEmptyArrays","data","map","obj","hasOwnProperty","writeToDataBase","path","readFromDatabase","database","writeUserInfoData","userInfo","uid","username","nick","email","avatar","photo","writeUserTasksData","userId","date","tabItems","tasks","writeNewDayData","setTabItems","setCategory","setTab","snapshot","dataTabItems","Date","toLocaleDateString","split","reverse","join","exists","val","title","createUserData","day","replaceAll","user_info","user_tasks","readUserData","setUserInfo","condition","userData","info","readPastData","params","setCalendarDate","openModals","modals","calendarModal","createAuthInfoModal","show","type","text","createStatistics","period","setStatistics","statistics","Categories","Created","Completed","updateStatistics","forEach","category","length","filter","task","completed","periods","Day","Month","currentMonth","substring","Year","currentYear","authentication","loginEmailPassword","login","setLogin","Password","userCredential","Email","user","setTimeout","authModal","Error","code","registrationEmailPassword","registration","setRegistration","navigate","console","log","logOut","defaultPhoto","setTimeLine","past","future"],"sources":["C:/Users/DarkFlyingCat/Desktop/dev/my-task-manager/src/firebase/firebaseConfig.js"],"sourcesContent":["import { initializeApp } from 'firebase/app'\r\nimport { getDatabase, ref, set, get } from 'firebase/database'\r\nimport {\r\n  getAuth,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  signOut,\r\n} from 'firebase/auth'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n}\r\n\r\nconst app = initializeApp(firebaseConfig)\r\nconst auth = getAuth(app)\r\nconst db = getDatabase(app)\r\n\r\n/* \r\n This is an auxiliary function that adds an empty array to the object for rendering,\r\n since empty arrays cannot be stored in the database.\r\n*/\r\nconst addEmptyArrays = data => {\r\n  return data.map(obj => (obj.hasOwnProperty('data') ? obj : { ...obj, data: [] }))\r\n}\r\n// Helper function for writing data in the database\r\nconst writeToDataBase = (path, data) => set(ref(db, path), data)\r\n// Helper function for reading data from the database\r\nconst readFromDatabase = path => get(ref(db, path))\r\n\r\n// database\r\nconst database = {\r\n  // send user information (email,avatar,nickname,id)\r\n  writeUserInfoData: async userInfo => {\r\n    const path = `users/${userInfo.uid}/user_info`\r\n\r\n    const data = {\r\n      uid: userInfo.uid,\r\n      username: userInfo.nick,\r\n      email: userInfo.email,\r\n      avatar: userInfo.photo,\r\n    }\r\n\r\n    return userInfo.uid && (await writeToDataBase(path, data))\r\n  },\r\n  // send user tasks Data\r\n  writeUserTasksData: async (userId, date, tabItems) => {\r\n    const path = `users/${userId}/user_tasks/${date}`\r\n    return userId && (await writeToDataBase(path, { ...tabItems.tasks }))\r\n  },\r\n  // create/read new day\r\n  writeNewDayData: async (userId, date, setTabItems, setCategory, setTab) => {\r\n    const path = `users/${userId}/user_tasks/${date}`\r\n    const snapshot = await readFromDatabase(path)\r\n\r\n    const dataTabItems = {\r\n      date: new Date().toLocaleDateString().split('.').reverse().join(''),\r\n      tasks: [],\r\n    }\r\n\r\n    if (snapshot.exists()) {\r\n      const tasks = snapshot.val()\r\n\r\n      setCategory(tasks[0].title)\r\n      setTab(tasks[0].title)\r\n      dataTabItems.tasks = addEmptyArrays(tasks)\r\n    }\r\n\r\n    return setTabItems(dataTabItems)\r\n  },\r\n  // create Data for new user\r\n  createUserData: async (userId, userInfo, tabItems) => {\r\n    const day = new Date().toLocaleDateString().replaceAll('.', '')\r\n    const path = `users/${userId}`\r\n\r\n    const data = {\r\n      user_info: {\r\n        uid: userInfo.uid,\r\n        username: userInfo.nick,\r\n        email: userInfo.email,\r\n        avatar: userInfo.photo,\r\n      },\r\n      user_tasks: { [day]: tabItems.tasks },\r\n    }\r\n\r\n    return userId && (await writeToDataBase(path, data))\r\n  },\r\n  // reade user Data\r\n  readUserData: async (userId, setUserInfo, tabItems, setTabItems, setTab, setCategory) => {\r\n    const date = new Date().toLocaleDateString().replaceAll('.', '')\r\n    const path = `users/${userId}/`\r\n    const snapshot = await readFromDatabase(path)\r\n\r\n    if (snapshot.exists()) {\r\n      const data = snapshot.val()\r\n\r\n      const condition = data.user_tasks && data.user_tasks[date]\r\n\r\n      const userData = {\r\n        info: {\r\n          photo: data.user_info.avatar,\r\n          nick: data.user_info.username,\r\n          email: data.user_info.email,\r\n          uid: data.user_info.uid,\r\n        },\r\n        tasks: {\r\n          ...tabItems,\r\n          tasks: addEmptyArrays(condition ? data.user_tasks[date] : []),\r\n        },\r\n      }\r\n\r\n      setUserInfo(userData.info)\r\n      setTabItems(userData.tasks)\r\n      setCategory(condition ? data.user_tasks[date][0].title : '')\r\n      setTab(condition ? data.user_tasks[date][0].title : '')\r\n    }\r\n  },\r\n  // reading the data of the selected day\r\n  readPastData: async ({ ...params }) => {\r\n    const date = params.date.toLocaleDateString().replaceAll('.', '')\r\n    const path = `users/${params.userInfo.uid}/user_tasks/${date}`\r\n    const snapshot = await readFromDatabase(path)\r\n\r\n    if (snapshot.exists()) {\r\n      const tasks = snapshot.val()\r\n\r\n      params.setCalendarDate(params.date)\r\n      params.setCategory(tasks[0].title)\r\n      params.setTab(tasks[0].title)\r\n      params.setTabItems({ ...params.tabItems, tasks: addEmptyArrays(tasks) })\r\n      params.openModals({ ...params.modals, calendarModal: false })\r\n    } else {\r\n      params.createAuthInfoModal({\r\n        show: true,\r\n        type: 'Error',\r\n        text: `You don't have any tasks for this day`,\r\n      })\r\n    }\r\n  },\r\n  // Statistics\r\n  createStatistics: async (userId, period, setStatistics) => {\r\n    const date = new Date().toLocaleDateString().replaceAll('.', '')\r\n    const path = `users/${userId}/user_tasks/${period === 'Day' ? date : ''}`\r\n    const snapshot = await readFromDatabase(path)\r\n\r\n    const statistics = { Categories: 0, Created: 0, Completed: 0 }\r\n\r\n    if (snapshot.exists()) {\r\n      const data = snapshot.val()\r\n\r\n      const updateStatistics = data => {\r\n        data.forEach(category => {\r\n          if (category.hasOwnProperty('data')) {\r\n            statistics.Created += category.data.length\r\n            statistics.Completed += category.data.filter(task => task.completed).length\r\n          }\r\n        })\r\n      }\r\n\r\n      const periods = {\r\n        Day: () => {\r\n          statistics.Categories = data.length\r\n          updateStatistics(data)\r\n        },\r\n        Month: () => {\r\n          const currentMonth = date.substring(2, 4)\r\n\r\n          for (const day in data) {\r\n            if (day.substring(2, 4) === currentMonth) {\r\n              statistics.Categories += data[day].length\r\n              updateStatistics(data[day])\r\n            }\r\n          }\r\n        },\r\n        Year: () => {\r\n          const currentYear = date.substring(4)\r\n\r\n          for (const day in data) {\r\n            if (day.substring(4) === currentYear) {\r\n              statistics.Categories += data[day].length\r\n              updateStatistics(data[day])\r\n            }\r\n          }\r\n        },\r\n      }\r\n\r\n      periods[period]()\r\n    }\r\n\r\n    return setStatistics(statistics)\r\n  },\r\n}\r\n\r\n// Authentication methods\r\nconst authentication = {\r\n  // Login\r\n  loginEmailPassword: async params => {\r\n    const {\r\n      login,\r\n      setLogin,\r\n      createAuthInfoModal,\r\n      userInfo,\r\n      setUserInfo,\r\n      tabItems,\r\n      setTabItems,\r\n      setTab,\r\n      setCategory,\r\n      modals,\r\n      openModals,\r\n    } = params\r\n\r\n    if (login.Password) {\r\n      try {\r\n        const userCredential = await signInWithEmailAndPassword(auth, login.Email, login.Password)\r\n\r\n        if (userCredential) {\r\n          setLogin({ Email: '', Password: '' })\r\n          createAuthInfoModal({\r\n            show: true,\r\n            type: 'Success',\r\n            text: 'Authorization successfully',\r\n          })\r\n\r\n          setUserInfo({\r\n            ...userInfo,\r\n            uid: userCredential.user.uid,\r\n          })\r\n\r\n          database.readUserData(\r\n            userCredential.user.uid,\r\n            setUserInfo,\r\n            tabItems,\r\n            setTabItems,\r\n            setTab,\r\n            setCategory,\r\n          )\r\n\r\n          setTimeout(() => openModals({ ...modals, authModal: false }), 1500)\r\n        }\r\n      } catch (Error) {\r\n        createAuthInfoModal({ show: true, type: 'Error', text: Error.code })\r\n      }\r\n    }\r\n  },\r\n  // Registration\r\n  registrationEmailPassword: async params => {\r\n    const {\r\n      registration,\r\n      setRegistration,\r\n      navigate,\r\n      createAuthInfoModal,\r\n      userInfo,\r\n      setUserInfo,\r\n      tabItems,\r\n      modals,\r\n      openModals,\r\n    } = params\r\n\r\n    if (registration.Password) {\r\n      try {\r\n        const userCredential = await createUserWithEmailAndPassword(\r\n          auth,\r\n          registration.Email,\r\n          registration.Password,\r\n        )\r\n\r\n        if (userCredential) {\r\n          setRegistration({ Email: '', Password: '' })\r\n          createAuthInfoModal({\r\n            show: true,\r\n            type: 'Success',\r\n            text: 'Registration successfully',\r\n          })\r\n\r\n          setUserInfo({\r\n            ...userInfo,\r\n            email: userCredential.user.email,\r\n            uid: userCredential.user.uid,\r\n          })\r\n\r\n          database.createUserData(userCredential.user.uid, userInfo, tabItems)\r\n\r\n          setTimeout(() => {\r\n            openModals({ ...modals, authModal: false })\r\n            navigate('Profile.jsx')\r\n          }, 1000)\r\n        }\r\n      } catch (Error) {\r\n        console.log(Error)\r\n        createAuthInfoModal({ show: true, type: 'Error', text: Error.code })\r\n      }\r\n    }\r\n  },\r\n  // Logout\r\n  logOut: async ({ ...params }) => {\r\n    const userData = {\r\n      info: {\r\n        photo: params.defaultPhoto,\r\n        nick: 'username',\r\n        email: '',\r\n        uid: '',\r\n      },\r\n      tasks: { ...params.tabItems, tasks: [] },\r\n    }\r\n\r\n    params.setCalendarDate(new Date())\r\n    params.setTimeLine({ past: false, future: false })\r\n    params.setUserInfo(userData.info)\r\n    params.setTabItems(userData.tasks)\r\n\r\n    return await signOut(auth)\r\n  },\r\n}\r\n\r\nexport { authentication, database }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}