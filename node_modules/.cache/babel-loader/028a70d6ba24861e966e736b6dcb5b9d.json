{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DarkFlyingCat\\\\Desktop\\\\dev\\\\my-task-manager\\\\src\\\\Pages\\\\main-page\\\\MainContent\\\\Tasks\\\\CategoriesTab\\\\TasksContainer.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TasksContainer = _ref => {\n  let {\n    MyTitle,\n    TransitionGroup,\n    CSSTransition,\n    Task,\n    ...props\n  } = _ref;\n  const classNames = {\n    category: props.containerType === 'Active' ? 'category__activeTasks' : 'category__completedTasks'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames.category,\n    children: [/*#__PURE__*/_jsxDEV(MyTitle, { ...props.categoryTitleStyles,\n      children: [props.containerType, \" tasks\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransitionGroup, {\n      className: props.darkMode ? 'activeTasks darkMode' : 'activeTasks',\n      children: props.tasksData.filter(task => !task.completed).map(uncompletedTask => {\n        const nodeRef = props.createRef(null);\n        return /*#__PURE__*/_jsxDEV(CSSTransition, {\n          nodeRef: nodeRef,\n          timeout: 500,\n          classNames: \"task\",\n          children: /*#__PURE__*/_jsxDEV(Task, {\n            time: uncompletedTask.time,\n            currentTask: uncompletedTask,\n            tabTitle: props.tabTitle,\n            completed: uncompletedTask.completed,\n            deleteTask: props.tasksMethods.deleteTask,\n            checkTask: props.tasksMethods.checkTask,\n            editTask: props.tasksMethods.editTask,\n            timeLine: props.timeLine,\n            ref: nodeRef,\n            children: uncompletedTask.task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 17\n          }, this)\n        }, uncompletedTask.time, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TasksContainer;\nexport default TasksContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksContainer\");","map":{"version":3,"names":["TasksContainer","MyTitle","TransitionGroup","CSSTransition","Task","props","classNames","category","containerType","categoryTitleStyles","darkMode","tasksData","filter","task","completed","map","uncompletedTask","nodeRef","createRef","time","tabTitle","tasksMethods","deleteTask","checkTask","editTask","timeLine"],"sources":["C:/Users/DarkFlyingCat/Desktop/dev/my-task-manager/src/Pages/main-page/MainContent/Tasks/CategoriesTab/TasksContainer.jsx"],"sourcesContent":["const TasksContainer = ({ MyTitle, TransitionGroup, CSSTransition, Task, ...props }) => {\r\n  const classNames = {\r\n    category:\r\n      props.containerType === 'Active'\r\n        ? 'category__activeTasks'\r\n        : 'category__completedTasks',\r\n  }\r\n\r\n  return (\r\n    <div className={classNames.category}>\r\n      <MyTitle {...props.categoryTitleStyles}>{props.containerType} tasks</MyTitle>\r\n\r\n      <TransitionGroup\r\n        className={props.darkMode ? 'activeTasks darkMode' : 'activeTasks'}>\r\n        {props.tasksData\r\n          .filter(task => !task.completed)\r\n          .map(uncompletedTask => {\r\n            const nodeRef = props.createRef(null)\r\n            return (\r\n              <CSSTransition\r\n                key={uncompletedTask.time}\r\n                nodeRef={nodeRef}\r\n                timeout={500}\r\n                classNames='task'>\r\n                <Task\r\n                  time={uncompletedTask.time}\r\n                  currentTask={uncompletedTask}\r\n                  tabTitle={props.tabTitle}\r\n                  completed={uncompletedTask.completed}\r\n                  deleteTask={props.tasksMethods.deleteTask}\r\n                  checkTask={props.tasksMethods.checkTask}\r\n                  editTask={props.tasksMethods.editTask}\r\n                  timeLine={props.timeLine}\r\n                  ref={nodeRef}>\r\n                  {uncompletedTask.task}\r\n                </Task>\r\n              </CSSTransition>\r\n            )\r\n          })}\r\n      </TransitionGroup>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TasksContainer\r\n"],"mappings":";;;AAAA,MAAMA,cAAc,GAAG,QAAiE;EAAA,IAAhE;IAAEC,OAAF;IAAWC,eAAX;IAA4BC,aAA5B;IAA2CC,IAA3C;IAAiD,GAAGC;EAApD,CAAgE;EACtF,MAAMC,UAAU,GAAG;IACjBC,QAAQ,EACNF,KAAK,CAACG,aAAN,KAAwB,QAAxB,GACI,uBADJ,GAEI;EAJW,CAAnB;EAOA,oBACE;IAAK,SAAS,EAAEF,UAAU,CAACC,QAA3B;IAAA,wBACE,QAAC,OAAD,OAAaF,KAAK,CAACI,mBAAnB;MAAA,WAAyCJ,KAAK,CAACG,aAA/C;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAGE,QAAC,eAAD;MACE,SAAS,EAAEH,KAAK,CAACK,QAAN,GAAiB,sBAAjB,GAA0C,aADvD;MAAA,UAEGL,KAAK,CAACM,SAAN,CACEC,MADF,CACSC,IAAI,IAAI,CAACA,IAAI,CAACC,SADvB,EAEEC,GAFF,CAEMC,eAAe,IAAI;QACtB,MAAMC,OAAO,GAAGZ,KAAK,CAACa,SAAN,CAAgB,IAAhB,CAAhB;QACA,oBACE,QAAC,aAAD;UAEE,OAAO,EAAED,OAFX;UAGE,OAAO,EAAE,GAHX;UAIE,UAAU,EAAC,MAJb;UAAA,uBAKE,QAAC,IAAD;YACE,IAAI,EAAED,eAAe,CAACG,IADxB;YAEE,WAAW,EAAEH,eAFf;YAGE,QAAQ,EAAEX,KAAK,CAACe,QAHlB;YAIE,SAAS,EAAEJ,eAAe,CAACF,SAJ7B;YAKE,UAAU,EAAET,KAAK,CAACgB,YAAN,CAAmBC,UALjC;YAME,SAAS,EAAEjB,KAAK,CAACgB,YAAN,CAAmBE,SANhC;YAOE,QAAQ,EAAElB,KAAK,CAACgB,YAAN,CAAmBG,QAP/B;YAQE,QAAQ,EAAEnB,KAAK,CAACoB,QARlB;YASE,GAAG,EAAER,OATP;YAAA,UAUGD,eAAe,CAACH;UAVnB;YAAA;YAAA;YAAA;UAAA;QALF,GACOG,eAAe,CAACG,IADvB;UAAA;UAAA;UAAA;QAAA,QADF;MAoBD,CAxBF;IAFH;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAkCD,CA1CD;;KAAMnB,c;AA4CN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}