{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, onAuthStateChanged, signOut } from 'firebase/auth';\nimport { getDatabase, ref, set, get, child } from 'firebase/database';\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getDatabase(app);\nconst dbRef = ref(db);\nlet userId = ''; // database\n\nconst database = {\n  writeUserData: async (userInfo, data) => {\n    await set(ref(db, `${userId}/`), {\n      username: userInfo.nick,\n      email: userInfo.email,\n      profile_picture: userInfo.photo,\n      userData: data\n    });\n  },\n  readUserData: async (setUserInfo, setTabItem) => {\n    const snapshot = await get(child(dbRef, `${userId}/`));\n    console.log(snapshot);\n\n    if (snapshot.exists()) {\n      const userData = snapshot.val();\n      setUserInfo({\n        photo: userData.profile_picture,\n        nick: userData.username,\n        email: userData.email\n      });\n    } else {\n      console.log(snapshot.exists());\n    }\n  }\n}; // Authentication methods\n\nconst authentication = {\n  // Login\n  loginEmailPassword: async _ref => {\n    let { ...params\n    } = _ref;\n\n    if (params.login.Password) {\n      try {\n        await signInWithEmailAndPassword(auth, params.login.Email, params.login.Password);\n        params.setLogin({\n          Email: '',\n          Password: ''\n        });\n        setTimeout(() => {\n          params.setAuthModal(false);\n        }, 1000);\n        params.createAuthInfoModal({\n          modal: true,\n          type: 'Success',\n          text: 'Authorization successfully'\n        });\n      } catch (Error) {\n        params.createAuthInfoModal({\n          modal: true,\n          type: 'Error',\n          text: Error.code\n        });\n      }\n    }\n  },\n  // Registration\n  registrationEmailPassword: async _ref2 => {\n    let { ...params\n    } = _ref2;\n\n    if (params.registration.Password) {\n      try {\n        await createUserWithEmailAndPassword(auth, params.registration.Email, params.registration.Password);\n        params.setRegistration({\n          Email: '',\n          Password: ''\n        });\n        setTimeout(() => {\n          params.setAuthModal(false);\n          params.navigate('Profile.jsx');\n        }, 1000);\n        params.createAuthInfoModal({\n          modal: true,\n          type: 'Success',\n          text: 'Registration successfully'\n        });\n      } catch (Error) {\n        params.createAuthInfoModal({\n          modal: true,\n          type: 'Error',\n          text: Error.code\n        });\n      }\n    }\n  },\n  // State\n  monitorAuthState: (setAuthorization, defaultPhoto, setUserInfo) => {\n    return onAuthStateChanged(auth, user => {\n      if (user) {\n        console.log(user);\n        userId = user.uid;\n        setAuthorization(true);\n        database.readUserData(setUserInfo);\n      } else {\n        setAuthorization(false);\n        userId = '';\n        setUserInfo({\n          photo: defaultPhoto,\n          nick: 'username',\n          email: ''\n        });\n      }\n    });\n  },\n  // Logout\n  logOut: async () => await signOut(auth)\n};\nexport { authentication, database };","map":{"version":3,"names":["initializeApp","getAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","onAuthStateChanged","signOut","getDatabase","ref","set","get","child","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","auth","db","dbRef","userId","database","writeUserData","userInfo","data","username","nick","email","profile_picture","photo","userData","readUserData","setUserInfo","setTabItem","snapshot","console","log","exists","val","authentication","loginEmailPassword","params","login","Password","Email","setLogin","setTimeout","setAuthModal","createAuthInfoModal","modal","type","text","Error","code","registrationEmailPassword","registration","setRegistration","navigate","monitorAuthState","setAuthorization","defaultPhoto","user","uid","logOut"],"sources":["C:/Users/DarkFlyingCat/Desktop/dev/my-task-manager/src/firebase/firebaseConfig.js"],"sourcesContent":["import { initializeApp } from 'firebase/app'\r\nimport {\r\n  getAuth,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n  signOut,\r\n} from 'firebase/auth'\r\nimport { getDatabase, ref, set, get, child } from 'firebase/database'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n}\r\n\r\nconst app = initializeApp(firebaseConfig)\r\nconst auth = getAuth(app)\r\nconst db = getDatabase(app)\r\nconst dbRef = ref(db)\r\n\r\nlet userId = ''\r\n// database\r\nconst database = {\r\n  writeUserData: async (userInfo, data) => {\r\n    await set(ref(db, `${userId}/`), {\r\n      username: userInfo.nick,\r\n      email: userInfo.email,\r\n      profile_picture: userInfo.photo,\r\n      userData: data,\r\n    })\r\n  },\r\n  readUserData: async (setUserInfo, setTabItem) => {\r\n    const snapshot = await get(child(dbRef, `${userId}/`))\r\n    console.log(snapshot)\r\n    if (snapshot.exists()) {\r\n      const userData = snapshot.val()\r\n\r\n      setUserInfo({\r\n        photo: userData.profile_picture,\r\n        nick: userData.username,\r\n        email: userData.email,\r\n      })\r\n    } else {\r\n      console.log(snapshot.exists())\r\n    }\r\n  },\r\n}\r\n\r\n// Authentication methods\r\nconst authentication = {\r\n  // Login\r\n  loginEmailPassword: async ({ ...params }) => {\r\n    if (params.login.Password) {\r\n      try {\r\n        await signInWithEmailAndPassword(auth, params.login.Email, params.login.Password)\r\n\r\n        params.setLogin({ Email: '', Password: '' })\r\n\r\n        setTimeout(() => {\r\n          params.setAuthModal(false)\r\n        }, 1000)\r\n\r\n        params.createAuthInfoModal({\r\n          modal: true,\r\n          type: 'Success',\r\n          text: 'Authorization successfully',\r\n        })\r\n      } catch (Error) {\r\n        params.createAuthInfoModal({ modal: true, type: 'Error', text: Error.code })\r\n      }\r\n    }\r\n  },\r\n  // Registration\r\n  registrationEmailPassword: async ({ ...params }) => {\r\n    if (params.registration.Password) {\r\n      try {\r\n        await createUserWithEmailAndPassword(\r\n          auth,\r\n          params.registration.Email,\r\n          params.registration.Password,\r\n        )\r\n\r\n        params.setRegistration({ Email: '', Password: '' })\r\n\r\n        setTimeout(() => {\r\n          params.setAuthModal(false)\r\n          params.navigate('Profile.jsx')\r\n        }, 1000)\r\n\r\n        params.createAuthInfoModal({\r\n          modal: true,\r\n          type: 'Success',\r\n          text: 'Registration successfully',\r\n        })\r\n      } catch (Error) {\r\n        params.createAuthInfoModal({ modal: true, type: 'Error', text: Error.code })\r\n      }\r\n    }\r\n  },\r\n  // State\r\n  monitorAuthState: (setAuthorization, defaultPhoto, setUserInfo) => {\r\n    return onAuthStateChanged(auth, user => {\r\n      if (user) {\r\n        console.log(user)\r\n        userId = user.uid\r\n        setAuthorization(true)\r\n\r\n        database.readUserData(setUserInfo)\r\n      } else {\r\n        setAuthorization(false)\r\n        userId = ''\r\n        setUserInfo({ photo: defaultPhoto, nick: 'username', email: '' })\r\n      }\r\n    })\r\n  },\r\n  // Logout\r\n  logOut: async () => await signOut(auth),\r\n}\r\n\r\nexport { authentication, database }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}