{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DarkFlyingCat\\\\Desktop\\\\dev\\\\my-task-manager\\\\src\\\\Pages\\\\main-page\\\\MainContent\\\\Tasks\\\\CategoriesTab\\\\TasksContainer.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TasksContainer = _ref => {\n  let {\n    MyTitle,\n    TransitionGroup,\n    CSSTransition,\n    Task,\n    ...props\n  } = _ref;\n  const typeCondition = props.type === 'Active';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: typeCondition ? 'activeTasks__block' : 'completedTasks__block',\n    children: [/*#__PURE__*/_jsxDEV(MyTitle, { ...props.categoryTitleStyles,\n      children: [props.type, \" tasks\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransitionGroup, {\n      className: typeCondition ? 'activeTasks__container' : 'completedTasks__container',\n      children: props.tasksData.filter(task => props.type === 'Active' ? !task.completed : task.completed).map(task => {\n        const nodeRef = props.createRef(null);\n        return /*#__PURE__*/_jsxDEV(CSSTransition, {\n          nodeRef: nodeRef,\n          timeout: 500,\n          classNames: \"task\",\n          children: /*#__PURE__*/_jsxDEV(Task, {\n            time: task.time,\n            currentTask: task,\n            tabTitle: props.tabTitle,\n            completed: task.completed,\n            deleteTask: props.tasksMethods.deleteTask,\n            checkTask: props.tasksMethods.checkTask,\n            editTask: props.tasksMethods.editTask,\n            timeLine: props.timeLine,\n            darkMode: props.darkMode,\n            ref: nodeRef,\n            children: task.task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 17\n          }, this)\n        }, task.time, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TasksContainer;\nexport default TasksContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksContainer\");","map":{"version":3,"names":["TasksContainer","MyTitle","TransitionGroup","CSSTransition","Task","props","typeCondition","type","categoryTitleStyles","tasksData","filter","task","completed","map","nodeRef","createRef","time","tabTitle","tasksMethods","deleteTask","checkTask","editTask","timeLine","darkMode"],"sources":["C:/Users/DarkFlyingCat/Desktop/dev/my-task-manager/src/Pages/main-page/MainContent/Tasks/CategoriesTab/TasksContainer.jsx"],"sourcesContent":["const TasksContainer = ({ MyTitle, TransitionGroup, CSSTransition, Task, ...props }) => {\r\n  const typeCondition = props.type === 'Active'\r\n\r\n  return (\r\n    <div className={typeCondition ? 'activeTasks__block' : 'completedTasks__block'}>\r\n      <MyTitle {...props.categoryTitleStyles}>{props.type} tasks</MyTitle>\r\n\r\n      <TransitionGroup\r\n        className={\r\n          typeCondition ? 'activeTasks__container' : 'completedTasks__container'\r\n        }>\r\n        {props.tasksData\r\n          .filter(task => (props.type === 'Active' ? !task.completed : task.completed))\r\n          .map(task => {\r\n            const nodeRef = props.createRef(null)\r\n            return (\r\n              <CSSTransition\r\n                key={task.time}\r\n                nodeRef={nodeRef}\r\n                timeout={500}\r\n                classNames='task'>\r\n                <Task\r\n                  time={task.time}\r\n                  currentTask={task}\r\n                  tabTitle={props.tabTitle}\r\n                  completed={task.completed}\r\n                  deleteTask={props.tasksMethods.deleteTask}\r\n                  checkTask={props.tasksMethods.checkTask}\r\n                  editTask={props.tasksMethods.editTask}\r\n                  timeLine={props.timeLine}\r\n                  darkMode={props.darkMode}\r\n                  ref={nodeRef}>\r\n                  {task.task}\r\n                </Task>\r\n              </CSSTransition>\r\n            )\r\n          })}\r\n      </TransitionGroup>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TasksContainer\r\n"],"mappings":";;;AAAA,MAAMA,cAAc,GAAG,QAAiE;EAAA,IAAhE;IAAEC,OAAF;IAAWC,eAAX;IAA4BC,aAA5B;IAA2CC,IAA3C;IAAiD,GAAGC;EAApD,CAAgE;EACtF,MAAMC,aAAa,GAAGD,KAAK,CAACE,IAAN,KAAe,QAArC;EAEA,oBACE;IAAK,SAAS,EAAED,aAAa,GAAG,oBAAH,GAA0B,uBAAvD;IAAA,wBACE,QAAC,OAAD,OAAaD,KAAK,CAACG,mBAAnB;MAAA,WAAyCH,KAAK,CAACE,IAA/C;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAGE,QAAC,eAAD;MACE,SAAS,EACPD,aAAa,GAAG,wBAAH,GAA8B,2BAF/C;MAAA,UAIGD,KAAK,CAACI,SAAN,CACEC,MADF,CACSC,IAAI,IAAKN,KAAK,CAACE,IAAN,KAAe,QAAf,GAA0B,CAACI,IAAI,CAACC,SAAhC,GAA4CD,IAAI,CAACC,SADnE,EAEEC,GAFF,CAEMF,IAAI,IAAI;QACX,MAAMG,OAAO,GAAGT,KAAK,CAACU,SAAN,CAAgB,IAAhB,CAAhB;QACA,oBACE,QAAC,aAAD;UAEE,OAAO,EAAED,OAFX;UAGE,OAAO,EAAE,GAHX;UAIE,UAAU,EAAC,MAJb;UAAA,uBAKE,QAAC,IAAD;YACE,IAAI,EAAEH,IAAI,CAACK,IADb;YAEE,WAAW,EAAEL,IAFf;YAGE,QAAQ,EAAEN,KAAK,CAACY,QAHlB;YAIE,SAAS,EAAEN,IAAI,CAACC,SAJlB;YAKE,UAAU,EAAEP,KAAK,CAACa,YAAN,CAAmBC,UALjC;YAME,SAAS,EAAEd,KAAK,CAACa,YAAN,CAAmBE,SANhC;YAOE,QAAQ,EAAEf,KAAK,CAACa,YAAN,CAAmBG,QAP/B;YAQE,QAAQ,EAAEhB,KAAK,CAACiB,QARlB;YASE,QAAQ,EAAEjB,KAAK,CAACkB,QATlB;YAUE,GAAG,EAAET,OAVP;YAAA,UAWGH,IAAI,CAACA;UAXR;YAAA;YAAA;YAAA;UAAA;QALF,GACOA,IAAI,CAACK,IADZ;UAAA;UAAA;UAAA;QAAA,QADF;MAqBD,CAzBF;IAJH;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqCD,CAxCD;;KAAMhB,c;AA0CN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}