{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, set, get } from 'firebase/database';\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from 'firebase/auth';\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getDatabase(app);\n/* \r\n This is an auxiliary function that adds an empty array to the object for rendering,\r\n since empty arrays cannot be stored in the database.\r\n*/\n\nconst addEmptyArrays = data => {\n  return data.map(obj => obj.hasOwnProperty('data') ? obj : { ...obj,\n    data: []\n  });\n}; // Helper function for writing data in the database\n\n\nconst writeToDataBase = (path, data) => set(ref(db, path), data); // Helper function for reading data from the database\n\n\nconst readFromDatabase = path => get(ref(db, path)); // database\n\n\nconst database = {\n  // send user information (email,avatar,nickname,id)\n  writeUserInfoData: async userInfo => {\n    const path = `users/${userInfo.uid}/user_info`;\n    const data = {\n      uid: userInfo.uid,\n      username: userInfo.nick,\n      email: userInfo.email,\n      avatar: userInfo.photo\n    };\n    return userInfo.uid && (await writeToDataBase(path, data));\n  },\n  // send user tasks Data\n  writeUserTasksData: async (userId, date, updatedTabItems) => {\n    const path = `users/${userId}/user_tasks/${date}`;\n    return userId && (await writeToDataBase(path, { ...updatedTabItems\n    }));\n  },\n  // create/read new day\n  writeNewDayData: async (userId, date, setTabItems, setCategory, setTab) => {\n    const path = `users/${userId}/user_tasks/${date}`;\n    const snapshot = await readFromDatabase(path);\n    const dataTabItems = {\n      date: new Date().toLocaleDateString().split('.').reverse().join(''),\n      tabs: []\n    };\n\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n      setCategory(data[0].title);\n      setTab(data[0].title);\n      dataTabItems.tabs = addEmptyArrays(data);\n    }\n\n    return setTabItems(dataTabItems);\n  },\n  // create Data for new user\n  createUserData: async (userId, userInfo, tabItems) => {\n    const day = new Date().toLocaleDateString().replaceAll('.', '');\n    const path = `users/${userId}`;\n    const data = {\n      user_info: {\n        uid: userInfo.uid,\n        username: userInfo.nick,\n        email: userInfo.email,\n        avatar: userInfo.photo\n      },\n      user_tasks: {\n        [day]: tabItems.tabs\n      }\n    };\n    return userId && (await writeToDataBase(path, data));\n  },\n  // reade user Data\n  readUserData: async (userId, setUserInfo, tabItems, setTabItems, setTab, setCategory) => {\n    const date = new Date().toLocaleDateString().replaceAll('.', '');\n    const path = `users/${userId}/`;\n    const snapshot = await readFromDatabase(path);\n\n    if (snapshot.exists()) {\n      const data = snapshot.val();\n      const condition = data.user_tasks && data.user_tasks[date];\n      const userData = {\n        info: {\n          photo: data.user_info.avatar,\n          nick: data.user_info.username,\n          email: data.user_info.email,\n          uid: data.user_info.uid\n        },\n        tabs: { ...tabItems,\n          tabs: addEmptyArrays(condition ? data.user_tasks[date] : [])\n        }\n      };\n      setUserInfo(userData.info);\n      setTabItems(userData.tabs);\n      setCategory(condition ? data.user_tasks[date][0].title : '');\n      setTab(condition ? data.user_tasks[date][0].title : '');\n    }\n  },\n  // reading the data of the selected day\n  readPastData: async params => {\n    const {\n      date,\n      userInfo,\n      setCalendarDate,\n      setCategory,\n      setTab,\n      tabItems,\n      setTabItems,\n      modals,\n      openModals,\n      createAuthInfoModal\n    } = params;\n    const pastDate = date.toLocaleDateString().replaceAll('.', '');\n    const path = `users/${userInfo.uid}/user_tasks/${pastDate}`;\n    const snapshot = await readFromDatabase(path);\n\n    if (snapshot.exists()) {\n      const tasks = snapshot.val();\n      setCalendarDate(date);\n      setCategory(tasks[0].title);\n      setTab(tasks[0].title);\n      setTabItems({ ...tabItems,\n        tabs: addEmptyArrays(tasks)\n      });\n      openModals({ ...modals,\n        calendarModal: false\n      });\n    } else {\n      createAuthInfoModal({\n        show: true,\n        type: 'Error',\n        text: `You don't have any tasks for this day`\n      });\n    }\n  },\n  // Statistics\n  createStatistics: async (userId, period, setStatistics, tabItems) => {\n    const date = new Date().toLocaleDateString().replaceAll('.', '');\n    const path = `users/${userId}/user_tasks/`;\n    const statistics = {\n      Categories: 0,\n      Created: 0,\n      Completed: 0\n    };\n\n    const updateStatistics = data => {\n      data.forEach(category => {\n        if (category.hasOwnProperty('data')) {\n          statistics.Created += category.data.length;\n          statistics.Completed += category.data.filter(task => task.completed).length;\n        }\n      });\n    };\n\n    const selectMY = data => {\n      const periods = {\n        Month: () => {\n          const currentMonth = date.substring(2, 4);\n\n          for (const day in data) {\n            if (day.substring(2, 4) === currentMonth) {\n              statistics.Categories += data[day].length;\n              updateStatistics(data[day]);\n            }\n          }\n        },\n        Year: () => {\n          const currentYear = date.substring(4);\n\n          for (const day in data) {\n            if (day.substring(4) === currentYear) {\n              statistics.Categories += data[day].length;\n              updateStatistics(data[day]);\n            }\n          }\n        }\n      };\n      return periods[period]();\n    };\n\n    if (period === 'Day') {\n      statistics.Categories = tabItems.tabs.length;\n      updateStatistics(tabItems.tabs);\n    } else {\n      const snapshot = await readFromDatabase(path);\n\n      if (snapshot.exists()) {\n        const data = snapshot.val();\n        selectMY(data);\n      }\n    }\n\n    return setStatistics(statistics);\n  }\n}; // Authentication methods\n\nconst authentication = {\n  // Login\n  loginEmailPassword: async params => {\n    const {\n      login,\n      setLogin,\n      createAuthInfoModal,\n      userInfo,\n      setUserInfo,\n      tabItems,\n      setTabItems,\n      setTab,\n      setCategory,\n      modals,\n      openModals\n    } = params;\n\n    if (login.Password) {\n      try {\n        const userCredential = await signInWithEmailAndPassword(auth, login.Email, login.Password);\n\n        if (userCredential) {\n          setLogin({\n            Email: '',\n            Password: ''\n          });\n          createAuthInfoModal({\n            show: true,\n            type: 'Success',\n            text: 'Authorization successfully'\n          });\n          setUserInfo({ ...userInfo,\n            uid: userCredential.user.uid\n          });\n          database.readUserData(userCredential.user.uid, setUserInfo, tabItems, setTabItems, setTab, setCategory);\n          setTimeout(() => openModals({ ...modals,\n            authModal: false\n          }), 1500);\n        }\n      } catch (Error) {\n        createAuthInfoModal({\n          show: true,\n          type: 'Error',\n          text: Error.code.substring(5).replaceAll('-', ' ')\n        });\n      }\n    }\n  },\n  // Registration\n  registrationEmailPassword: async params => {\n    const {\n      registration,\n      setRegistration,\n      navigate,\n      createAuthInfoModal,\n      userInfo,\n      setUserInfo,\n      tabItems,\n      modals,\n      openModals\n    } = params;\n\n    if (registration.Password) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(auth, registration.Email, registration.Password);\n\n        if (userCredential) {\n          setRegistration({\n            Email: '',\n            Password: ''\n          });\n          createAuthInfoModal({\n            show: true,\n            type: 'Success',\n            text: 'Registration successfully'\n          });\n          setUserInfo({ ...userInfo,\n            email: userCredential.user.email,\n            uid: userCredential.user.uid\n          });\n          database.createUserData(userCredential.user.uid, userInfo, tabItems);\n          setTimeout(() => {\n            openModals({ ...modals,\n              authModal: false\n            });\n            navigate('Profile.jsx');\n          }, 1000);\n        }\n      } catch (Error) {\n        createAuthInfoModal({\n          show: true,\n          type: 'Error',\n          text: Error.code.substring(5).replaceAll('-', ' ')\n        });\n      }\n    }\n  },\n  // Logout\n  logOut: async params => {\n    const {\n      defaultPhoto,\n      setCalendarDate,\n      setTimeLine,\n      setUserInfo,\n      tabItems,\n      setTabItems\n    } = params;\n    const userData = {\n      info: {\n        photo: defaultPhoto,\n        nick: 'username',\n        email: '',\n        uid: ''\n      },\n      tabs: { ...tabItems,\n        tabs: []\n      }\n    };\n    setCalendarDate(new Date());\n    setTimeLine({\n      past: false,\n      future: false\n    });\n    setUserInfo(userData.info);\n    setTabItems(userData.tabs);\n    return await signOut(auth);\n  }\n};\nexport { authentication, database };","map":{"version":3,"names":["initializeApp","getDatabase","ref","set","get","getAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","auth","db","addEmptyArrays","data","map","obj","hasOwnProperty","writeToDataBase","path","readFromDatabase","database","writeUserInfoData","userInfo","uid","username","nick","email","avatar","photo","writeUserTasksData","userId","date","updatedTabItems","writeNewDayData","setTabItems","setCategory","setTab","snapshot","dataTabItems","Date","toLocaleDateString","split","reverse","join","tabs","exists","val","title","createUserData","tabItems","day","replaceAll","user_info","user_tasks","readUserData","setUserInfo","condition","userData","info","readPastData","params","setCalendarDate","modals","openModals","createAuthInfoModal","pastDate","tasks","calendarModal","show","type","text","createStatistics","period","setStatistics","statistics","Categories","Created","Completed","updateStatistics","forEach","category","length","filter","task","completed","selectMY","periods","Month","currentMonth","substring","Year","currentYear","authentication","loginEmailPassword","login","setLogin","Password","userCredential","Email","user","setTimeout","authModal","Error","code","registrationEmailPassword","registration","setRegistration","navigate","logOut","defaultPhoto","setTimeLine","past","future"],"sources":["C:/Users/DarkFlyingCat/Desktop/dev/my-task-manager/src/firebase/firebaseConfig.js"],"sourcesContent":["import { initializeApp } from 'firebase/app'\r\nimport { getDatabase, ref, set, get } from 'firebase/database'\r\nimport {\r\n  getAuth,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  signOut,\r\n} from 'firebase/auth'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n}\r\n\r\nconst app = initializeApp(firebaseConfig)\r\nconst auth = getAuth(app)\r\nconst db = getDatabase(app)\r\n\r\n/* \r\n This is an auxiliary function that adds an empty array to the object for rendering,\r\n since empty arrays cannot be stored in the database.\r\n*/\r\nconst addEmptyArrays = data => {\r\n  return data.map(obj => (obj.hasOwnProperty('data') ? obj : { ...obj, data: [] }))\r\n}\r\n// Helper function for writing data in the database\r\nconst writeToDataBase = (path, data) => set(ref(db, path), data)\r\n// Helper function for reading data from the database\r\nconst readFromDatabase = path => get(ref(db, path))\r\n\r\n// database\r\nconst database = {\r\n  // send user information (email,avatar,nickname,id)\r\n  writeUserInfoData: async userInfo => {\r\n    const path = `users/${userInfo.uid}/user_info`\r\n\r\n    const data = {\r\n      uid: userInfo.uid,\r\n      username: userInfo.nick,\r\n      email: userInfo.email,\r\n      avatar: userInfo.photo,\r\n    }\r\n\r\n    return userInfo.uid && (await writeToDataBase(path, data))\r\n  },\r\n  // send user tasks Data\r\n  writeUserTasksData: async (userId, date, updatedTabItems) => {\r\n    const path = `users/${userId}/user_tasks/${date}`\r\n    return userId && (await writeToDataBase(path, { ...updatedTabItems }))\r\n  },\r\n  // create/read new day\r\n  writeNewDayData: async (userId, date, setTabItems, setCategory, setTab) => {\r\n    const path = `users/${userId}/user_tasks/${date}`\r\n    const snapshot = await readFromDatabase(path)\r\n\r\n    const dataTabItems = {\r\n      date: new Date().toLocaleDateString().split('.').reverse().join(''),\r\n      tabs: [],\r\n    }\r\n\r\n    if (snapshot.exists()) {\r\n      const data = snapshot.val()\r\n\r\n      setCategory(data[0].title)\r\n      setTab(data[0].title)\r\n      dataTabItems.tabs = addEmptyArrays(data)\r\n    }\r\n\r\n    return setTabItems(dataTabItems)\r\n  },\r\n  // create Data for new user\r\n  createUserData: async (userId, userInfo, tabItems) => {\r\n    const day = new Date().toLocaleDateString().replaceAll('.', '')\r\n    const path = `users/${userId}`\r\n\r\n    const data = {\r\n      user_info: {\r\n        uid: userInfo.uid,\r\n        username: userInfo.nick,\r\n        email: userInfo.email,\r\n        avatar: userInfo.photo,\r\n      },\r\n      user_tasks: { [day]: tabItems.tabs },\r\n    }\r\n\r\n    return userId && (await writeToDataBase(path, data))\r\n  },\r\n  // reade user Data\r\n  readUserData: async (userId, setUserInfo, tabItems, setTabItems, setTab, setCategory) => {\r\n    const date = new Date().toLocaleDateString().replaceAll('.', '')\r\n    const path = `users/${userId}/`\r\n    const snapshot = await readFromDatabase(path)\r\n\r\n    if (snapshot.exists()) {\r\n      const data = snapshot.val()\r\n\r\n      const condition = data.user_tasks && data.user_tasks[date]\r\n\r\n      const userData = {\r\n        info: {\r\n          photo: data.user_info.avatar,\r\n          nick: data.user_info.username,\r\n          email: data.user_info.email,\r\n          uid: data.user_info.uid,\r\n        },\r\n        tabs: {\r\n          ...tabItems,\r\n          tabs: addEmptyArrays(condition ? data.user_tasks[date] : []),\r\n        },\r\n      }\r\n\r\n      setUserInfo(userData.info)\r\n      setTabItems(userData.tabs)\r\n      setCategory(condition ? data.user_tasks[date][0].title : '')\r\n      setTab(condition ? data.user_tasks[date][0].title : '')\r\n    }\r\n  },\r\n  // reading the data of the selected day\r\n  readPastData: async params => {\r\n    const {\r\n      date,\r\n      userInfo,\r\n      setCalendarDate,\r\n      setCategory,\r\n      setTab,\r\n      tabItems,\r\n      setTabItems,\r\n      modals,\r\n      openModals,\r\n      createAuthInfoModal,\r\n    } = params\r\n\r\n    const pastDate = date.toLocaleDateString().replaceAll('.', '')\r\n    const path = `users/${userInfo.uid}/user_tasks/${pastDate}`\r\n    const snapshot = await readFromDatabase(path)\r\n\r\n    if (snapshot.exists()) {\r\n      const tasks = snapshot.val()\r\n\r\n      setCalendarDate(date)\r\n      setCategory(tasks[0].title)\r\n      setTab(tasks[0].title)\r\n      setTabItems({ ...tabItems, tabs: addEmptyArrays(tasks) })\r\n      openModals({ ...modals, calendarModal: false })\r\n    } else {\r\n      createAuthInfoModal({\r\n        show: true,\r\n        type: 'Error',\r\n        text: `You don't have any tasks for this day`,\r\n      })\r\n    }\r\n  },\r\n  // Statistics\r\n  createStatistics: async (userId, period, setStatistics, tabItems) => {\r\n    const date = new Date().toLocaleDateString().replaceAll('.', '')\r\n    const path = `users/${userId}/user_tasks/`\r\n\r\n    const statistics = { Categories: 0, Created: 0, Completed: 0 }\r\n\r\n    const updateStatistics = data => {\r\n      data.forEach(category => {\r\n        if (category.hasOwnProperty('data')) {\r\n          statistics.Created += category.data.length\r\n          statistics.Completed += category.data.filter(task => task.completed).length\r\n        }\r\n      })\r\n    }\r\n\r\n    const selectMY = data => {\r\n      const periods = {\r\n        Month: () => {\r\n          const currentMonth = date.substring(2, 4)\r\n\r\n          for (const day in data) {\r\n            if (day.substring(2, 4) === currentMonth) {\r\n              statistics.Categories += data[day].length\r\n              updateStatistics(data[day])\r\n            }\r\n          }\r\n        },\r\n        Year: () => {\r\n          const currentYear = date.substring(4)\r\n\r\n          for (const day in data) {\r\n            if (day.substring(4) === currentYear) {\r\n              statistics.Categories += data[day].length\r\n              updateStatistics(data[day])\r\n            }\r\n          }\r\n        },\r\n      }\r\n\r\n      return periods[period]()\r\n    }\r\n\r\n    if (period === 'Day') {\r\n      statistics.Categories = tabItems.tabs.length\r\n      updateStatistics(tabItems.tabs)\r\n    } else {\r\n      const snapshot = await readFromDatabase(path)\r\n\r\n      if (snapshot.exists()) {\r\n        const data = snapshot.val()\r\n        selectMY(data)\r\n      }\r\n    }\r\n\r\n    return setStatistics(statistics)\r\n  },\r\n}\r\n\r\n// Authentication methods\r\nconst authentication = {\r\n  // Login\r\n  loginEmailPassword: async params => {\r\n    const {\r\n      login,\r\n      setLogin,\r\n      createAuthInfoModal,\r\n      userInfo,\r\n      setUserInfo,\r\n      tabItems,\r\n      setTabItems,\r\n      setTab,\r\n      setCategory,\r\n      modals,\r\n      openModals,\r\n    } = params\r\n\r\n    if (login.Password) {\r\n      try {\r\n        const userCredential = await signInWithEmailAndPassword(auth, login.Email, login.Password)\r\n\r\n        if (userCredential) {\r\n          setLogin({ Email: '', Password: '' })\r\n          createAuthInfoModal({\r\n            show: true,\r\n            type: 'Success',\r\n            text: 'Authorization successfully',\r\n          })\r\n\r\n          setUserInfo({\r\n            ...userInfo,\r\n            uid: userCredential.user.uid,\r\n          })\r\n\r\n          database.readUserData(\r\n            userCredential.user.uid,\r\n            setUserInfo,\r\n            tabItems,\r\n            setTabItems,\r\n            setTab,\r\n            setCategory,\r\n          )\r\n\r\n          setTimeout(() => openModals({ ...modals, authModal: false }), 1500)\r\n        }\r\n      } catch (Error) {\r\n        createAuthInfoModal({\r\n          show: true,\r\n          type: 'Error',\r\n          text: Error.code.substring(5).replaceAll('-', ' '),\r\n        })\r\n      }\r\n    }\r\n  },\r\n  // Registration\r\n  registrationEmailPassword: async params => {\r\n    const {\r\n      registration,\r\n      setRegistration,\r\n      navigate,\r\n      createAuthInfoModal,\r\n      userInfo,\r\n      setUserInfo,\r\n      tabItems,\r\n      modals,\r\n      openModals,\r\n    } = params\r\n\r\n    if (registration.Password) {\r\n      try {\r\n        const userCredential = await createUserWithEmailAndPassword(\r\n          auth,\r\n          registration.Email,\r\n          registration.Password,\r\n        )\r\n\r\n        if (userCredential) {\r\n          setRegistration({ Email: '', Password: '' })\r\n          createAuthInfoModal({\r\n            show: true,\r\n            type: 'Success',\r\n            text: 'Registration successfully',\r\n          })\r\n\r\n          setUserInfo({\r\n            ...userInfo,\r\n            email: userCredential.user.email,\r\n            uid: userCredential.user.uid,\r\n          })\r\n\r\n          database.createUserData(userCredential.user.uid, userInfo, tabItems)\r\n\r\n          setTimeout(() => {\r\n            openModals({ ...modals, authModal: false })\r\n            navigate('Profile.jsx')\r\n          }, 1000)\r\n        }\r\n      } catch (Error) {\r\n        createAuthInfoModal({\r\n          show: true,\r\n          type: 'Error',\r\n          text: Error.code.substring(5).replaceAll('-', ' '),\r\n        })\r\n      }\r\n    }\r\n  },\r\n  // Logout\r\n  logOut: async params => {\r\n    const { defaultPhoto, setCalendarDate, setTimeLine, setUserInfo, tabItems, setTabItems } =\r\n      params\r\n\r\n    const userData = {\r\n      info: {\r\n        photo: defaultPhoto,\r\n        nick: 'username',\r\n        email: '',\r\n        uid: '',\r\n      },\r\n      tabs: { ...tabItems, tabs: [] },\r\n    }\r\n\r\n    setCalendarDate(new Date())\r\n    setTimeLine({ past: false, future: false })\r\n    setUserInfo(userData.info)\r\n    setTabItems(userData.tabs)\r\n\r\n    return await signOut(auth)\r\n  },\r\n}\r\n\r\nexport { authentication, database }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}