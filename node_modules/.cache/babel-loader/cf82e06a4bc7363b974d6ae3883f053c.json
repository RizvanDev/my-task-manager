{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DarkFlyingCat\\\\Desktop\\\\dev\\\\my-task-manager\\\\src\\\\Pages\\\\main-page\\\\MainContent\\\\Tasks\\\\CategoriesTab\\\\CategoriesTab.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useContext } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './categoriesTab.scss';\nimport MyTitle from '../../../../../Components/MyTitle/MyTitle';\nimport CategoriesConfig from '../CategoriesConfig/CategoriesConfig';\nimport Task from '../Task/Task';\nimport useValue from '../../../../../hooks/useValue';\nimport { Context } from '../../../../../context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CategoriesTab = props => {\n  _s();\n\n  const [modal, setModal] = useValue(false);\n  const {\n    darkMode,\n    tab,\n    setTab,\n    setCategory,\n    tabItems,\n    setTabItem,\n    editTask,\n    checkTask,\n    deleteTask,\n    setSortType,\n    timeLine\n  } = useContext(Context);\n\n  const removeCategory = () => {\n    const checkingTabs = tabItems[props.idx - 1] || tabItems[1];\n    setTab(tabItems.length > 1 && checkingTabs.title);\n    setCategory(tabItems.length > 1 && checkingTabs.title);\n    return setTabItem(tabItems.filter(e => e.title !== props.category.title));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: tab === props.category.title ? 'category__container active' : 'category__container',\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category__title\",\n      children: props.category.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category__activeTasks\",\n      children: [/*#__PURE__*/_jsxDEV(MyTitle, {\n        fontSize: \"18px\",\n        lineHeight: \"25px\",\n        letterSpacing: \"0.02em\",\n        children: \"Active tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TransitionGroup, {\n        className: darkMode ? 'activeTasksContainer darkMode' : 'activeTasksContainer',\n        children: props.category.data.filter(task => !task.completed).map(uncompletedTask => {\n          const nodeRef = /*#__PURE__*/createRef(null);\n          return /*#__PURE__*/_jsxDEV(CSSTransition, {\n            nodeRef: nodeRef,\n            timeout: 500,\n            classNames: \"task\",\n            children: /*#__PURE__*/_jsxDEV(Task, {\n              time: uncompletedTask.time,\n              currentTask: uncompletedTask,\n              tabTitle: props.category.title,\n              deleteTask: deleteTask,\n              completed: uncompletedTask.completed,\n              checkTask: checkTask,\n              editTask: editTask,\n              timeLine: timeLine,\n              ref: nodeRef,\n              children: uncompletedTask.task\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this)\n          }, uncompletedTask.time, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category__completedTasks\",\n      children: [/*#__PURE__*/_jsxDEV(MyTitle, {\n        fontSize: \"18px\",\n        lineHeight: \"25px\",\n        letterSpacing: \"0.02em\",\n        children: \"Completed tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TransitionGroup, {\n        className: darkMode ? 'completedTasksContainer darkMode' : 'completedTasksContainer',\n        children: props.category.data.filter(task => task.completed).map(completedTask => {\n          const nodeRef = /*#__PURE__*/createRef(null);\n          return /*#__PURE__*/_jsxDEV(CSSTransition, {\n            nodeRef: nodeRef,\n            timeout: 500,\n            classNames: \"task\",\n            children: /*#__PURE__*/_jsxDEV(Task, {\n              time: completedTask.time,\n              currentTask: completedTask,\n              tabTitle: props.category.title,\n              deleteTask: deleteTask,\n              completed: completedTask.completed,\n              checkTask: checkTask,\n              pastTime: pastTime,\n              ref: nodeRef,\n              children: completedTask.task\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 19\n            }, this)\n          }, completedTask.time, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"category__configBtn\",\n      title: \"configuration\",\n      onClick: () => setModal(!modal),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CategoriesConfig, {\n      modal: modal,\n      timeLine: timeLine,\n      category: props.category,\n      setSortType: setSortType,\n      removeCategory: removeCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CategoriesTab, \"+ygG3uOCJxyHcoDMKLErc+adVrY=\", false, function () {\n  return [useValue];\n});\n\n_c = CategoriesTab;\nexport default CategoriesTab;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoriesTab\");","map":{"version":3,"names":["React","createRef","useContext","CSSTransition","TransitionGroup","MyTitle","CategoriesConfig","Task","useValue","Context","CategoriesTab","props","modal","setModal","darkMode","tab","setTab","setCategory","tabItems","setTabItem","editTask","checkTask","deleteTask","setSortType","timeLine","removeCategory","checkingTabs","idx","length","title","filter","e","category","data","task","completed","map","uncompletedTask","nodeRef","time","completedTask","pastTime"],"sources":["C:/Users/DarkFlyingCat/Desktop/dev/my-task-manager/src/Pages/main-page/MainContent/Tasks/CategoriesTab/CategoriesTab.jsx"],"sourcesContent":["import React, { createRef, useContext } from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport './categoriesTab.scss'\r\nimport MyTitle from '../../../../../Components/MyTitle/MyTitle'\r\nimport CategoriesConfig from '../CategoriesConfig/CategoriesConfig'\r\nimport Task from '../Task/Task'\r\nimport useValue from '../../../../../hooks/useValue'\r\nimport { Context } from '../../../../../context'\r\n\r\nconst CategoriesTab = props => {\r\n  const [modal, setModal] = useValue(false)\r\n\r\n  const {\r\n    darkMode,\r\n    tab,\r\n    setTab,\r\n    setCategory,\r\n    tabItems,\r\n    setTabItem,\r\n    editTask,\r\n    checkTask,\r\n    deleteTask,\r\n    setSortType,\r\n    timeLine,\r\n  } = useContext(Context)\r\n\r\n  const removeCategory = () => {\r\n    const checkingTabs = tabItems[props.idx - 1] || tabItems[1]\r\n\r\n    setTab(tabItems.length > 1 && checkingTabs.title)\r\n    setCategory(tabItems.length > 1 && checkingTabs.title)\r\n\r\n    return setTabItem(tabItems.filter(e => e.title !== props.category.title))\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        tab === props.category.title\r\n          ? 'category__container active'\r\n          : 'category__container'\r\n      }>\r\n      <div className='category__title'>{props.category.title}</div>\r\n      <div className='category__activeTasks'>\r\n        <MyTitle fontSize='18px' lineHeight='25px' letterSpacing='0.02em'>\r\n          Active tasks\r\n        </MyTitle>\r\n        <TransitionGroup\r\n          className={darkMode ? 'activeTasksContainer darkMode' : 'activeTasksContainer'}>\r\n          {props.category.data\r\n            .filter(task => !task.completed)\r\n            .map(uncompletedTask => {\r\n              const nodeRef = createRef(null)\r\n              return (\r\n                <CSSTransition\r\n                  key={uncompletedTask.time}\r\n                  nodeRef={nodeRef}\r\n                  timeout={500}\r\n                  classNames='task'>\r\n                  <Task\r\n                    time={uncompletedTask.time}\r\n                    currentTask={uncompletedTask}\r\n                    tabTitle={props.category.title}\r\n                    deleteTask={deleteTask}\r\n                    completed={uncompletedTask.completed}\r\n                    checkTask={checkTask}\r\n                    editTask={editTask}\r\n                    timeLine={timeLine}\r\n                    ref={nodeRef}>\r\n                    {uncompletedTask.task}\r\n                  </Task>\r\n                </CSSTransition>\r\n              )\r\n            })}\r\n        </TransitionGroup>\r\n      </div>\r\n      <div className='category__completedTasks'>\r\n        <MyTitle fontSize='18px' lineHeight='25px' letterSpacing='0.02em'>\r\n          Completed tasks\r\n        </MyTitle>\r\n        <TransitionGroup\r\n          className={\r\n            darkMode ? 'completedTasksContainer darkMode' : 'completedTasksContainer'\r\n          }>\r\n          {props.category.data\r\n            .filter(task => task.completed)\r\n            .map(completedTask => {\r\n              const nodeRef = createRef(null)\r\n              return (\r\n                <CSSTransition\r\n                  key={completedTask.time}\r\n                  nodeRef={nodeRef}\r\n                  timeout={500}\r\n                  classNames='task'>\r\n                  <Task\r\n                    time={completedTask.time}\r\n                    currentTask={completedTask}\r\n                    tabTitle={props.category.title}\r\n                    deleteTask={deleteTask}\r\n                    completed={completedTask.completed}\r\n                    checkTask={checkTask}\r\n                    pastTime={pastTime}\r\n                    ref={nodeRef}>\r\n                    {completedTask.task}\r\n                  </Task>\r\n                </CSSTransition>\r\n              )\r\n            })}\r\n        </TransitionGroup>\r\n      </div>\r\n      <button\r\n        type='button'\r\n        className='category__configBtn'\r\n        title='configuration'\r\n        onClick={() => setModal(!modal)}>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n      </button>\r\n      <CategoriesConfig\r\n        modal={modal}\r\n        timeLine={timeLine}\r\n        category={props.category}\r\n        setSortType={setSortType}\r\n        removeCategory={removeCategory}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategoriesTab\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}